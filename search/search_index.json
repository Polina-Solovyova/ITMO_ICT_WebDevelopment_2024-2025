{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WEB-\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3. \u0420\u0415\u0410\u041b\u0418\u0417\u0410\u0426\u0418\u042f \u0421\u0415\u0420\u0412\u0415\u0420\u041d\u041e\u0419 \u0427\u0410\u0421\u0422\u0418 \u041f\u0420\u0418\u041b\u041e\u0416\u0415\u041d\u0418\u042f \u0421\u0420\u0415\u0414\u0421\u0422\u0412\u0410\u041c\u0418 DJANGO \u0418 DJANGORESTFRAMEWORK.</p>"},{"location":"#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435</li> <li>\u0410\u0434\u043c\u0438\u043d \u043f\u0430\u043d\u0435\u043b\u044c</li> <li>\u041c\u043e\u0434\u0435\u043b\u0438</li> <li>\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b</li> <li>\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f</li> <li>\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b</li> <li>\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f</li> <li>Leetcode</li> </ul>"},{"location":"admin/","title":"\u0410\u0434\u043c\u0438\u043d-\u043f\u0430\u043d\u0435\u043b\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438","text":""},{"location":"admin/#performer","title":"\u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0438 (Performer)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0443 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f, \u0438\u043c\u0435\u043d\u0438 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u0435.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0438\u043c\u0435\u043d\u0438.</li> </ul> <pre><code>@admin.register(Performer)\nclass PerformerAdmin(admin.ModelAdmin):\n    list_display = ('name', 'manager', 'email', 'phone')\n    search_fields = ('name', 'manager', 'email')\n    list_filter = ('manager',)\n    ordering = ('name',)\n</code></pre>"},{"location":"admin/#concert","title":"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b (Concert)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043f\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0443, \u0434\u0430\u0442\u0435 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044e.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 \u0438 \u0438\u043c\u0435\u043d\u0438 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435.</li> </ul> <pre><code>@admin.register(Concert)\nclass ConcertAdmin(admin.ModelAdmin):\n    list_display = ('title', 'performer', 'date', 'status', 'age_limit')\n    search_fields = ('title', 'performer__name')\n    list_filter = ('status', 'date', 'performer')\n    ordering = ('date',)\n</code></pre>"},{"location":"admin/#equipment","title":"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 (Equipment)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u043e \u0438\u043c\u0435\u043d\u0438.</li> </ul> <pre><code>@admin.register(Equipment)\nclass EquipmentAdmin(admin.ModelAdmin):\n    list_display = ('name', 'quantity')\n    search_fields = ('name',)\n    list_filter = ('name',)\n    ordering = ('name',)\n</code></pre>"},{"location":"admin/#concertequipment","title":"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 (ConcertEquipment)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443 \u0438 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044e.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 \u0438 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430.</li> </ul> <pre><code>@admin.register(ConcertEquipment)\nclass ConcertEquipmentAdmin(admin.ModelAdmin):\n    list_display = ('concert', 'equipment', 'quantity')\n    search_fields = ('concert__title', 'equipment__name')\n    list_filter = ('concert', 'equipment')\n    ordering = ('concert',)\n</code></pre>"},{"location":"admin/#ticket","title":"\u0411\u0438\u043b\u0435\u0442\u044b (Ticket)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443 \u0438 \u0446\u0435\u043d\u0435.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0431\u0438\u043b\u0435\u0442\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u043f\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443 \u0438 \u0446\u0435\u043d\u0435.</li> </ul> <pre><code>@admin.register(Ticket)\nclass TicketAdmin(admin.ModelAdmin):\n    list_display = ('name', 'concert', 'price', 'total_quantity', 'sold_quantity', 'available_quantity')\n    search_fields = ('name', 'concert__title')\n    list_filter = ('concert', 'price')\n    ordering = ('concert', 'price')\n</code></pre>"},{"location":"admin/#order","title":"\u0417\u0430\u043a\u0430\u0437\u044b (Order)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0441\u0442\u0430\u0442\u0443\u0441\u0443 \u0438 \u0434\u0430\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u0431\u0438\u043b\u0435\u0442\u0430 \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0443 \u0437\u0430\u043a\u0430\u0437\u0430.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435.</li> </ul> <pre><code>@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = ('user', 'ticket', 'quantity', 'date', 'total_price', 'status')\n    search_fields = ('user__username', 'ticket__name', 'status')\n    list_filter = ('status', 'date')\n    ordering = ('date',)\n</code></pre>"},{"location":"admin/#employee","title":"\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438 (Employee)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u0438.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0438 \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u0438.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0438\u043c\u0435\u043d\u0438.</li> </ul> <pre><code>@admin.register(Employee)\nclass EmployeeAdmin(admin.ModelAdmin):\n    list_display = ('name', 'position', 'salary', 'phone', 'email')\n    search_fields = ('name', 'position')\n    list_filter = ('position',)\n    ordering = ('name',)\n</code></pre>"},{"location":"admin/#organizer","title":"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b (Organizer)","text":"<ul> <li>\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443.</li> <li>\u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430.</li> <li>\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430.</li> </ul> <pre><code>@admin.register(Organizer)\nclass OrganizerAdmin(admin.ModelAdmin):\n    list_display = ('employee', 'concert')\n    search_fields = ('employee__name', 'concert__title')\n    list_filter = ('concert',)\n    ordering = ('concert',)\n</code></pre>"},{"location":"leetcode/","title":"Leetcode","text":""},{"location":"leetcode/#leetcode","title":"Leetcode","text":""},{"location":"leetcode/#27-remove-element","title":"27. Remove Element","text":"<p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.</p> <p>Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:</p> <p>Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <p>int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length.                             // It is sorted with no values equaling val.</p> <p>int k = removeElement(nums, val); // Calls your implementation</p> <p>assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i &lt; actualLength; i++) {     assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <p>Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,,] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2:</p> <p>Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,,,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Constraints:</p> <p>0 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 50 0 &lt;= val &lt;= 100</p>"},{"location":"leetcode/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        count = 0\n        for i in range(len(nums))[::-1]:\n            if nums[i] == val:\n                nums.pop(i)\n                nums.append('_')\n                count += 1\n        return len(nums)-count        \n\n</code></pre>"},{"location":"leetcode/#88-merge-sorted-array","title":"88. Merge Sorted Array","text":"<p>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</p> <p>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</p> <p>Example 1:</p> <p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Example 2:</p> <p>Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. Example 3:</p> <p>Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</p> <p>Constraints:</p> <p>nums1.length == m + n nums2.length == n 0 &lt;= m, n &lt;= 200 1 &lt;= m + n &lt;= 200 -109 &lt;= nums1[i], nums2[j] &lt;= 109</p>"},{"location":"leetcode/#solution_1","title":"Solution","text":"<pre><code>class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        del nums1[m:m+n]\n        for i in range(n):\n            k=0\n            while k in range (len(nums1)) and nums1[k] &lt; nums2[i]:\n                k+=1\n            nums1.insert(k, nums2[i])\n\n</code></pre>"},{"location":"leetcode/#238-product-of-array-except-self","title":"238. Product of Array Except Self","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: [24,12,8,6]</p> <p>Example 2:</p> <p>Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]</p> <p>Constraints:</p> <p>2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>"},{"location":"leetcode/#solution_2","title":"Solution","text":"<pre><code>class Solution:\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n        n = len(nums)\n        answer = [1] * n\n\n        left_product = 1\n        for i in range(n):\n            answer[i] = left_product\n            left_product *= nums[i]\n\n        right_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= right_product\n            right_product *= nums[i]\n\n        return answer\n</code></pre>"},{"location":"leetcode/#238-product-of-array-except-self_1","title":"238. Product of Array Except Self","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: [24,12,8,6]</p> <p>Example 2:</p> <p>Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]</p> <p>Constraints:</p> <p>2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>"},{"location":"leetcode/#solution_3","title":"Solution","text":"<pre><code>class RandomizedSet:\n    def __init__(self):\n        self.val_to_index = {}\n        self.values = []\n\n    def insert(self, val: int) -&gt; bool:\n        if val in self.val_to_index:\n            return False\n        self.val_to_index[val] = len(self.values)\n        self.values.append(val)\n        return True\n\n    def remove(self, val: int) -&gt; bool:\n        if val not in self.val_to_index:\n            return False\n        index = self.val_to_index[val]\n        last_val = self.values[-1]\n        self.values[index] = last_val\n        self.val_to_index[last_val] = index\n        self.values.pop()\n        del self.val_to_index[val]\n        return True\n\n    def getRandom(self) -&gt; int:\n        return random.choice(self.values)\n</code></pre>"},{"location":"leetcode/#274-h-index","title":"274. H-Index","text":"<p>Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.</p> <p>According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.</p> <p>Example 1:</p> <p>Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2:</p> <p>Input: citations = [1,3,1] Output: 1</p>"},{"location":"leetcode/#solution_4","title":"Solution","text":"<pre><code>class Solution:\n    def hIndex(self, citations: List[int]) -&gt; int:\n        citations.sort(reverse=True)  \n        h_index = 0\n        for i, citation in enumerate(citations):\n            if citation &gt;= i + 1:\n                h_index = i + 1\n            else:\n                break\n        return h_index\n</code></pre>"},{"location":"leetcode/#55-jump-game","title":"55. Jump Game","text":"<p>You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return true if you can reach the last index, or false otherwise.</p> <p>Example 1:</p> <p>Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2:</p> <p>Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p> <p>Constraints:</p> <p>1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 105</p>"},{"location":"leetcode/#solution_5","title":"Solution","text":"<pre><code>class Solution:\n    def canJump(self, nums: List[int]) -&gt; bool:\n        max_reach = 0\n        for i, jump in enumerate(nums):\n            if i &gt; max_reach:\n                return False\n            max_reach = max(max_reach, i + jump)\n            if max_reach &gt;= len(nums) - 1:\n                return True\n        return False\n</code></pre>"},{"location":"leetcode/#122-best-time-to-buy-and-sell-stock-ii","title":"122. Best Time to Buy and Sell Stock II","text":"<p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p>Example 1:</p> <p>Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2:</p> <p>Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3:</p> <p>Input: prices = [7,6,4,3,1] Output: 0 Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</p> <p>Constraints:</p> <p>1 &lt;= prices.length &lt;= 3 * 104 0 &lt;= prices[i] &lt;= 104</p>"},{"location":"leetcode/#solution_6","title":"Solution","text":"<pre><code>class Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] &gt; prices[i - 1]:\n                max_profit += prices[i] - prices[i - 1]\n        return max_profit\n</code></pre>"},{"location":"models/","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438","text":""},{"location":"models/#1-performer","title":"1. \u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c (Performer)","text":"<pre><code>class Performer(models.Model):\n    name = models.CharField(max_length=255)\n    manager = models.CharField(max_length=255)\n    email = models.EmailField()\n    phone = models.CharField(max_length=20)\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\u0445. - <code>name</code> \u2014 \u0418\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f. - <code>manager</code> \u2014 \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f. - <code>email</code> \u2014 \u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 email. - <code>phone</code> \u2014 \u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d.</p>"},{"location":"models/#2-concert","title":"2. \u041a\u043e\u043d\u0446\u0435\u0440\u0442 (Concert)","text":"<pre><code>class Concert(models.Model):\n    STATUS_CHOICES = [\n        ('held', '\u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043d'),\n        ('cancelled', '\u041e\u0442\u043c\u0435\u043d\u0435\u043d'),\n        ('prepared', '\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043b\u0435\u043d'),\n        ('in_progress', '\u0412 \u0440\u0430\u0431\u043e\u0442\u0435')\n    ]\n\n    image = models.ImageField(upload_to='concerts', default='concerts.jpg')\n    title = models.CharField(max_length=255)\n    description = models.TextField()\n    performer = models.ForeignKey(Performer, on_delete=models.CASCADE, related_name=\"concerts\")\n    date = models.DateField()\n    age_limit = models.PositiveIntegerField(default=0)\n    status = models.CharField(max_length=11, choices=STATUS_CHOICES, default='in_progress')\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\u0445. - <code>image</code> \u2014 \u041e\u0431\u043b\u043e\u0436\u043a\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - <code>title</code> \u2014 \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - <code>description</code> \u2014 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - <code>performer</code> \u2014 \u0418\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c. - <code>date</code> \u2014 \u0414\u0430\u0442\u0430 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f. - <code>age_limit</code> \u2014 \u0412\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435. - <code>status</code> \u2014 \u0421\u0442\u0430\u0442\u0443\u0441 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 (<code>held</code>, <code>cancelled</code>, <code>prepared</code>, <code>in_progress</code>).</p>"},{"location":"models/#3-equipment","title":"3. \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 (Equipment)","text":"<pre><code>class Equipment(models.Model):\n    name = models.CharField(max_length=255)\n    quantity = models.PositiveIntegerField()\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0425\u0440\u0430\u043d\u0438\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f. - <code>name</code> \u2014 \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f. - <code>quantity</code> \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e.</p>"},{"location":"models/#4-concertequipment","title":"4. \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 (ConcertEquipment)","text":"<pre><code>class ConcertEquipment(models.Model):\n    concert = models.ForeignKey(Concert, on_delete=models.CASCADE, related_name=\"equipment\")\n    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE, related_name=\"concerts\")\n    quantity = models.PositiveIntegerField()\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u044b \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435\u043c. - <code>concert</code> \u2014 \u041a\u043e\u043d\u0446\u0435\u0440\u0442. - <code>equipment</code> \u2014 \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435. - <code>quantity</code> \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</p>"},{"location":"models/#5-ticket","title":"5. \u0411\u0438\u043b\u0435\u0442 (Ticket)","text":"<pre><code>class Ticket(models.Model):\n    concert = models.ForeignKey('Concert', on_delete=models.CASCADE, related_name='ticket_categories')\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    total_quantity = models.PositiveIntegerField()\n    sold_quantity = models.PositiveIntegerField(default=0)\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u043b\u0435\u0442\u0430\u0445 \u043d\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442. - <code>concert</code> \u2014 \u041a\u043e\u043d\u0446\u0435\u0440\u0442. - <code>name</code> \u2014 \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0431\u0438\u043b\u0435\u0442\u043e\u0432. - <code>price</code> \u2014 \u0426\u0435\u043d\u0430 \u0431\u0438\u043b\u0435\u0442\u0430. - <code>total_quantity</code> \u2014 \u0412\u0441\u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432. - <code>sold_quantity</code> \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u0438\u043b\u0435\u0442\u043e\u0432.</p> <p>\u041c\u0435\u0442\u043e\u0434\u044b: - <code>available_quantity</code> \u2014 \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0431\u0438\u043b\u0435\u0442\u043e\u0432. - <code>sell_tickets(quantity)</code> \u2014 \u041f\u0440\u043e\u0434\u0430\u0435\u0442 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432.</p>"},{"location":"models/#6-order","title":"6. \u0417\u0430\u043a\u0430\u0437 (Order)","text":"<pre><code>class Order(models.Model):\n    STATUS_CHOICES = [\n        ('confirmed', '\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u043e'),\n        ('pending', '\u0412 \u043e\u0436\u0438\u0434\u0430\u043d\u0438\u0438'),\n        ('returned', '\u0412\u043e\u0437\u0432\u0440\u0430\u0442'),\n    ]\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"orders\")\n    ticket = models.ForeignKey(Ticket, on_delete=models.CASCADE, related_name=\"orders\")\n    quantity = models.PositiveIntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0437\u0430\u043a\u0430\u0437\u0430\u0445 \u0431\u0438\u043b\u0435\u0442\u043e\u0432. - <code>user</code> \u2014 \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. - <code>ticket</code> \u2014 \u0412\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0439 \u0431\u0438\u043b\u0435\u0442. - <code>quantity</code> \u2014 \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432. - <code>date</code> \u2014 \u0414\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0430. - <code>total_price</code> \u2014 \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c. - <code>status</code> \u2014 \u0421\u0442\u0430\u0442\u0443\u0441 \u0437\u0430\u043a\u0430\u0437\u0430 (<code>confirmed</code>, <code>pending</code>, <code>returned</code>).</p> <p>\u041c\u0435\u0442\u043e\u0434\u044b: - <code>save()</code> \u2014 \u041f\u0435\u0440\u0435\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 <code>total_price</code> \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c.</p>"},{"location":"models/#7-employee","title":"7. \u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a (Employee)","text":"<pre><code>class Employee(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, null=True, blank=True, related_name=\"employee\")\n    name = models.CharField(max_length=255)\n    position = models.CharField(max_length=255)\n    salary = models.DecimalField(max_digits=10, decimal_places=2)\n    phone = models.CharField(max_length=20)\n    email = models.EmailField()\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0425\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438. - <code>user</code> \u2014 \u041f\u0440\u0438\u0432\u044f\u0437\u043a\u0430 \u043a \u0443\u0447\u0435\u0442\u043d\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438. - <code>name</code> \u2014 \u0418\u043c\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430. - <code>position</code> \u2014 \u0414\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c. - <code>salary</code> \u2014 \u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430. - <code>phone</code> \u2014 \u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d. - <code>email</code> \u2014 \u041a\u043e\u043d\u0442\u0430\u043a\u0442\u043d\u044b\u0439 email.</p>"},{"location":"models/#8-organizer","title":"8. \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440 (Organizer)","text":"<pre><code>class Organizer(models.Model):\n    employee = models.ForeignKey(Employee, on_delete=models.CASCADE, related_name=\"organized_concerts\")\n    concert = models.ForeignKey(Concert, on_delete=models.CASCADE, related_name=\"organizers\")\n</code></pre> <p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432-\u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u0441 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\u043c\u0438. - <code>employee</code> \u2014 \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440. - <code>concert</code> \u2014 \u041a\u043e\u043d\u0446\u0435\u0440\u0442.</p>"},{"location":"overview/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u21163","text":""},{"location":"overview/#_1","title":"\u0422\u0435\u043c\u0430","text":"<p>\u0421\u0430\u0439\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043d\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0438</p>"},{"location":"overview/#_2","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b","text":"<p>\u041e\u0432\u043b\u0430\u0434\u0435\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u043c\u0438 \u043d\u0430\u0432\u044b\u043a\u0430\u043c\u0438 \u0438 \u0443\u043c\u0435\u043d\u0438\u044f\u043c\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 web-\u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django \u0438 Django REST Framework.</p>"},{"location":"overview/#_3","title":"\u0417\u0430\u0434\u0430\u0447\u0438","text":"<ol> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django ORM (\u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u043d\u0430 \u043a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438).</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0443 \u0440\u0430\u0431\u043e\u0442\u044b API \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django REST Framework (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438).</li> <li>\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e /\u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u043f\u043e \u0442\u043e\u043a\u0435\u043d\u0430\u043c /\u0432\u044b\u0432\u043e\u0434 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Djoser.</li> <li>\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 3.1 \u043f\u043e \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438).</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u0440\u0430\u0431\u043e\u0442\u0443 \u0432\u0441\u0435\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 endpoint-\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Read the Docs \u0438\u043b\u0438 MkDocs.</li> </ol>"},{"location":"overview/#_4","title":"\u0417\u0430\u043f\u0443\u0441\u043a \u043f\u0440\u043e\u0435\u043a\u0442\u0430","text":"<pre><code>python manage.py runserver\n</code></pre>"},{"location":"pr_work/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.1","text":""},{"location":"pr_work/#1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. </p> <pre><code>from project_second_app.models import *\ncar = Car.objects.create(state_number='A000AA199', brand='BMW', model='X5')\ncar = Car.objects.create(state_number='A001AA199', brand='BMW', model='X4')\ncar = Car.objects.create(state_number='A000AA198', brand='BMW', model='X5')\ncar = Car.objects.create(state_number='A004AA197', brand='BMW', model='M5')\ncar = Car.objects.create(state_number='A006AA197', brand='Audi', model='A80')\ncar = Car.objects.create(state_number='A007AA197', brand='Audi', model='S6')\nowner = Owner.objects.create(firstName=\"First\", lastName=\"Firstov\")\nowner = Owner.objects.create(firstName=\"Second\", lastName=\"Seconod\")\nowner = Owner.objects.create(firstName=\"Third\", lastName=\"Thirdov\")\nowner = Owner.objects.create(firstName=\"Fourth\", lastName=\"Fourthov\")\nowner = Owner.objects.create(firstName=\"Fith\", lastName=\"Fithov\")\nowner = Owner.objects.create(firstName=\"Sixth\", lastName=\"Sixthov\")\ncar = Car.objects.get(state_number='A000AA199')\nowner = Owner.objects.get(firstName='First')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2023-11-06', date_end='2024-03-12')\nowner = Owner.objects.get(firstName='Second')\ncar = Car.objects.get(state_number='A001AA199')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2023-12-06', date_end='2024-05-12')\ncar = Car.objects.get(state_number='A000AA198')\nowner = Owner.objects.get(firstName='Third')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-01-15', date_end='2024-05-12')\ncar = Car.objects.get(state_number='A004AA197')\nowner = Owner.objects.get(firstName='Fourth')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-03-15', date_end='2024-04-13')\ncar = Car.objects.get(state_number='A006AA197')\nowner = Owner.objects.get(firstName='Fith')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-01-25')\ncar = Car.objects.get(state_number='A007AA197')\nowner = Owner.objects.get(firstName='Sixth')\nownership = Ownership.objects.create(owner_id=owner, car_id=car, date_start='2024-06-21')\n\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111111', type='b', date_of_issue='2026-12-13')\nowner = Owner.objects.get(firstName='Fith')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111112', type='b', date_of_issue='2030-05-13')\nowner = Owner.objects.get(firstName='Fourth')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111113', type='b', date_of_issue='2032-05-13')\nowner = Owner.objects.get(firstName='Third')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111114', type='b', date_of_issue='2033-02-25')\nowner = Owner.objects.get(firstName='Second')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111115', type='b', date_of_issue='2025-02-25')\nowner = Owner.objects.get(firstName='First')\nlicense = DriverLicense.objects.create(owner_id=owner, license_number='1111111116', type='b', date_of_issue='2025-02-25')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:  </p>"},{"location":"pr_work/#2","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e:</p> <ul> <li>\u0413\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 related_name \u043a \u043f\u043e\u043b\u044f\u043c \u043c\u043e\u0434\u0435\u043b\u0438</li> <li>\u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c)</li> <li>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435)</li> <li>\u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430)</li> <li>\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442)</li> <li>\u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435)</li> </ul> <pre><code>Car.objects.filter(brand='BMW')\nOwner.objects.filter(firstName='First')\nowner_id = Owner.objects.get(firstName='First').id\nlicense = DriverLicense.objects.get(owner_id=1)\nowners = Owner.objects.filter(car_)\nowners = Owner.objects.filter(owner_car__car__color__contains='Red')\nowners = Owner.objects.filter(owner_car__date_start__contains='2024')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: </p>"},{"location":"pr_work/#3","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<ul> <li>\u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f</li> <li>\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435</li> <li>\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f</li> <li>\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438</li> <li>\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f </li> </ul> <pre><code>DriverLicense.objects.aggregate(Min(\"date_of_issue\"))\nOwnership.objects.aggregate(Max(\"date_start\"))\nOwnership.objects.values(\"owner\").annotate(Count(\"id\"))\nCar.objects.values(\"brand\").annotate(Count(\"id\"))\nfrom django.db.models import F\nOwner.objects.annotate(issue_date=F('driverlicense__date_of_issue')).distinct().order_by('issue_date')\n</code></pre> <p>\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:  </p>"},{"location":"pr_work/#32","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 3.2","text":""},{"location":"pr_work/#1_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0435\u043d\u0434\u043f\u043e\u0438\u043d\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0441\u043a\u0438\u043b\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0443\u043d\u043a\u0442\u0435 \u0432\u044b\u0448\u0435.</p>"},{"location":"pr_work/#serializerspy","title":"serializers.py:","text":"<pre><code>class SkillSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Skill\n        fields = \"__all__\"\n</code></pre>"},{"location":"pr_work/#viewspy","title":"views.py:","text":"<pre><code>class SkillAPIView(APIView):\n   def get(self, request):\n       skills = Skill.objects.all()\n       serializer = SkillSerializer(skills, many=True)\n       return Response({\"Skills\": serializer.data})\n\nclass SkillCreateSerializer(serializers.Serializer):\n    title = serializers.CharField(max_length=120)\n\n    def create(self, validated_data):\n        skill_model_inst = Skill(**validated_data)\n        skill_model_inst.save()\n        return skill_model_inst\n\n    def update(self, instance, validated_data):\n        pass\n</code></pre>"},{"location":"pr_work/#2_1","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445 \u0438 \u0438\u0445 \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435).</p>"},{"location":"pr_work/#serializerspy_1","title":"serializers.py:","text":"<pre><code>class WarriorProfessionSerializer(serializers.ModelSerializer):\n    profession = ProfessionSerializer(many=False)\n    class Meta:\n        model = Warrior\n        fields = [\"id\", \"race\", \"name\", \"level\", \"profession\"]\n</code></pre>"},{"location":"pr_work/#viewspy_1","title":"views.py:","text":"<pre><code>class WarriorProfessionListAPIView(generics.ListAPIView):\n    serializer_class = WarriorProfessionSerializer\n    queryset = Warrior.objects.all()\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0439\u043d\u0430\u0445 \u0438 \u0438\u0445 \u0441\u043a\u0438\u043b\u0430\u0445 (\u0432 \u043e\u0434\u043d\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u0435).</p>"},{"location":"pr_work/#serializerspy_2","title":"serializers.py:","text":"<pre><code>class WarriorSkillSerializer(serializers.ModelSerializer):\n    skill = SkillSerializer(many=True)\n\n    class Meta:\n        model = Warrior\n        fields = [\"id\", \"race\", \"name\", \"level\", \"skill\"]\n</code></pre>"},{"location":"pr_work/#viewspy_2","title":"views.py:","text":"<pre><code>class WarriorSkillListApiView(generics.ListAPIView):\n    serializer_class = WarriorSkillSerializer\n    queryset = Warrior.objects.all()\n</code></pre> <p>\u0412\u044b\u0432\u043e\u0434 \u043f\u043e\u043b\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u043e\u0439\u043d\u0435 (\u043f\u043e id), \u0435\u0433\u043e \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u044f\u0445 \u0438 \u0441\u043a\u0438\u043b\u0430\u0445.</p>"},{"location":"pr_work/#serializerspy_3","title":"serializers.py:","text":"<pre><code>class OneWarriorSerializer(serializers.ModelSerializer,):\n    skill = SkillSerializer(many=True)\n    profession = ProfessionSerializer(many=False)\n\n    class Meta:\n        model = Warrior\n        fields = \"__all__\"\n</code></pre>"},{"location":"pr_work/#viewspy_3","title":"views.py:","text":"<pre><code>class ShowWarriorAPIView(generics.RetrieveAPIView):\n    serializer_class = OneWarriorSerializer\n    queryset = Warrior.objects.all()\n</code></pre> <p>\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0432\u043e\u0439\u043d\u0430 \u043f\u043e id.</p>"},{"location":"pr_work/#viewspy_4","title":"views.py:","text":"<pre><code>class DeleteWarriorAPIView(generics.DestroyAPIView):\n    serializer_class = OneWarriorSerializer\n    queryset = Warrior.objects.all()\n</code></pre> <p>\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0432\u043e\u0439\u043d\u0435.</p>"},{"location":"pr_work/#viewspy_5","title":"views.py:","text":"<pre><code>class UpdateWarriorAPIView(UpdateAPIView):\n    serializer_class = OneWarriorSerializer\n    queryset = Warrior.objects.all()\n</code></pre>"},{"location":"serializers/","title":"\u0421\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0442\u043e\u0440\u044b","text":""},{"location":"serializers/#_2","title":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438","text":""},{"location":"serializers/#userregistrationserializer","title":"UserRegistrationSerializer","text":"<pre><code>class UserRegistrationSerializer(serializers.Serializer):\n    username = serializers.CharField(max_length=255)\n    email = serializers.EmailField(required=False)\n    password = serializers.CharField(write_only=True)\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>\u041f\u043e\u043b\u044f: username, email (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435), password (\u0441\u043a\u0440\u044b\u0442\u043e\u0435 \u043f\u043e\u043b\u0435).</li> </ul>"},{"location":"serializers/#userloginserializer","title":"UserLoginSerializer","text":"<pre><code>class UserLoginSerializer(serializers.Serializer):\n    username = serializers.CharField(max_length=255)\n    password = serializers.CharField(write_only=True)\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>\u041f\u043e\u043b\u044f: username, password (\u0441\u043a\u0440\u044b\u0442\u043e\u0435 \u043f\u043e\u043b\u0435).</li> </ul>"},{"location":"serializers/#_3","title":"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b","text":""},{"location":"serializers/#concertserializer","title":"ConcertSerializer","text":"<pre><code>class ConcertSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Concert\n        fields = ['title', 'performer', 'description', 'date', 'age_limit']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432.</li> <li>\u041f\u043e\u043b\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0430, \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043d\u043e\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435.</li> </ul>"},{"location":"serializers/#concertlistserializer","title":"ConcertListSerializer","text":"<pre><code>class ConcertListSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Concert\n        fields = ['id', 'title', 'date']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432.</li> <li>\u041f\u043e\u043b\u044f: ID, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0430.</li> </ul>"},{"location":"serializers/#concertdetailserializer","title":"ConcertDetailSerializer","text":"<pre><code>class ConcertDetailSerializer(serializers.ModelSerializer):\n    tickets = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Concert\n        fields = ['id', 'title', 'description', 'date', 'age_limit', 'status', 'performer', 'tickets']\n\n    def get_tickets(self, obj):\n        return TicketDetailSerializer(obj.ticket_categories.all(), many=True).data\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435.</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u0431\u0438\u043b\u0435\u0442\u044b.</li> </ul>"},{"location":"serializers/#_4","title":"\u0411\u0438\u043b\u0435\u0442\u044b","text":""},{"location":"serializers/#ticketserializer","title":"TicketSerializer","text":"<pre><code>class TicketSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ticket\n        fields = ['name', 'price', 'total_quantity', 'concert']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u043e\u0432.</li> <li>\u041f\u043e\u043b\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0446\u0435\u043d\u0430, \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u043d\u0446\u0435\u0440\u0442.</li> </ul>"},{"location":"serializers/#ticketdetailserializer","title":"TicketDetailSerializer","text":"<pre><code>class TicketDetailSerializer(serializers.ModelSerializer):\n    available_quantity = serializers.SerializerMethodField()\n\n    class Meta:\n        model = Ticket\n        fields = ['id', 'name', 'price', 'total_quantity', 'sold_quantity', 'available_quantity']\n\n    def get_available_quantity(self, obj):\n        return obj.total_quantity - obj.sold_quantity\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0431\u0438\u043b\u0435\u0442\u043e\u0432.</li> <li>\u0420\u0430\u0441\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432.</li> </ul>"},{"location":"serializers/#ticketcreateserializer","title":"TicketCreateSerializer","text":"<pre><code>class TicketCreateSerializer(serializers.Serializer):\n    name = serializers.CharField(max_length=255)\n    price = serializers.DecimalField(max_digits=10, decimal_places=2)\n    quantity = serializers.IntegerField()\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0438\u043b\u0435\u0442\u043e\u0432.</li> <li>\u041f\u043e\u043b\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0446\u0435\u043d\u0430, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e.</li> </ul>"},{"location":"serializers/#ticketorderserializer","title":"TicketOrderSerializer","text":"<pre><code>class TicketOrderSerializer(serializers.ModelSerializer):\n    concert = ConcertSerializer(read_only=True)\n\n    class Meta:\n        model = Ticket\n        fields = ['name', 'price', 'concert']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u043a\u0430\u0437\u0435 \u0431\u0438\u043b\u0435\u0442\u0430.</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u044b.</li> </ul>"},{"location":"serializers/#_5","title":"\u0417\u0430\u043a\u0430\u0437\u044b","text":""},{"location":"serializers/#orderserializer","title":"OrderSerializer","text":"<pre><code>class OrderSerializer(serializers.ModelSerializer):\n    ticket = TicketOrderSerializer()\n\n    class Meta:\n        model = Order\n        fields = ['ticket', 'quantity', 'date', 'total_price', 'status']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432.</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u0438\u043b\u0435\u0442\u0435 \u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0435 \u0437\u0430\u043a\u0430\u0437\u0430.</li> </ul>"},{"location":"serializers/#ordercreationserializer","title":"OrderCreationSerializer","text":"<pre><code>class OrderCreationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Order\n        fields = ['ticket', 'quantity']\n\n    def create(self, validated_data):\n        ticket = validated_data['ticket']\n        quantity = validated_data['quantity']\n\n        if ticket.available_quantity &lt; quantity:\n            raise serializers.ValidationError({\"error\": \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0431\u0438\u043b\u0435\u0442\u043e\u0432\"})\n\n        ticket.sell_tickets(quantity)\n        order = Order.objects.create(**validated_data)\n        return order\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0430.</li> <li>\u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435\u043c \u0437\u0430\u043a\u0430\u0437\u0430.</li> </ul>"},{"location":"serializers/#_6","title":"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b","text":""},{"location":"serializers/#organizerserializer","title":"OrganizerSerializer","text":"<pre><code>class OrganizerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Organizer\n        fields = '__all__'\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u0432 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432.</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u043e\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438.</li> </ul>"},{"location":"serializers/#_7","title":"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"serializers/#equipmentserializer","title":"EquipmentSerializer","text":"<pre><code>class EquipmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Equipment\n        fields = ['name']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</li> <li>\u041f\u043e\u043b\u044f: \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</li> </ul>"},{"location":"serializers/#concertequipmentserializer","title":"ConcertEquipmentSerializer","text":"<pre><code>class ConcertEquipmentSerializer(serializers.ModelSerializer):\n    equipment = EquipmentSerializer()\n\n    class Meta:\n        model = ConcertEquipment\n        fields = ['concert', 'equipment', 'quantity']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0441 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u043c.</li> <li>\u0412\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f.</li> </ul>"},{"location":"serializers/#concertequipmentcreationserializer","title":"ConcertEquipmentCreationSerializer","text":"<pre><code>class ConcertEquipmentCreationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ConcertEquipment\n        fields = ['concert', 'equipment', 'quantity']\n</code></pre> <ul> <li>\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443.</li> <li>\u041f\u043e\u043b\u044f: \u043a\u043e\u043d\u0446\u0435\u0440\u0442, \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e.</li> </ul>"},{"location":"urls/","title":"\u041c\u0430\u0440\u0448\u0440\u0443\u0442\u044b","text":"<pre><code>from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f\n    path('auth/register/', views.register_user, name='register'),\n    path('auth/login/', views.login_user, name='login'),\n    path('auth/logout/', views.logout_user, name='logout'),\n\n    # \u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b\n    path('concerts/', views.concert_list, name='concert-list'),\n    path('concerts/', views.create_concert, name='create_concert'),\n    path('concerts/&lt;int:pk&gt;/', views.concert_detail, name='concert-detail'),\n    path('concerts/&lt;int:pk&gt;/', views.update_concert, name='update_concert'),\n    path('concerts/&lt;int:pk&gt;/delete/', views.delete_concert, name='delete_concert'),\n\n    # \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432\n    path('concerts/equipment/', views.add_equipment_to_concert, name='add_equipment_to_concert'),\n    path('concerts/&lt;int:concert_id&gt;/equipment/', views.get_equipment_for_concert, name='get_equipment_for_concert'),\n    path('concerts/equipment/&lt;int:pk&gt;/remove/', views.remove_equipment_from_concert, name='remove_equipment_from_concert'),\n    path('concerts/equipment/&lt;int:pk&gt;/update/', views.update_equipment_for_concert, name='update_equipment_for_concert'),\n\n    # \u0411\u0438\u043b\u0435\u0442\u044b\n    path('tickets/', views.ticket_list_create, name='ticket-list-create'),\n    path('tickets/&lt;int:pk&gt;/', views.ticket_detail, name='ticket-detail'),\n\n    # \u0417\u0430\u043a\u0430\u0437\u044b\n    path('orders/', views.order_list_create, name='order-list-create'),\n    path('orders/&lt;int:pk&gt;/', views.get_order, name='get_order'),\n    path('orders/&lt;int:pk&gt;/confirm/', views.confirm_order, name='confirm-order'),\n\n    # \u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b\n    path(\"organizer/assign/&lt;int:pk&gt;/\", views.assign_concert, name=\"assign_concert\"),\n    path(\"organizer/concerts/\", views.get_organizer_concerts, name=\"organizer-concerts\"),\n]\n</code></pre>"},{"location":"urls/#_2","title":"\u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044f","text":"<ul> <li>auth/register/ \u2013 \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>auth/login/ \u2013 \u0412\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> <li>auth/logout/ \u2013 \u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.</li> </ul>"},{"location":"urls/#_3","title":"\u041a\u043e\u043d\u0446\u0435\u0440\u0442\u044b","text":"<ul> <li>concerts/ \u2013 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432.</li> <li>concerts/ \u2013 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430.</li> <li>concerts// \u2013 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. <li>concerts// \u2013 \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. <li>concerts//delete/ \u2013 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430."},{"location":"urls/#_4","title":"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432","text":"<ul> <li>concerts/equipment/ \u2013 \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443.</li> <li>concerts//equipment/ \u2013 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. <li>concerts/equipment//remove/ \u2013 \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u0437 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. <li>concerts/equipment//update/ \u2013 \u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430."},{"location":"urls/#_5","title":"\u0411\u0438\u043b\u0435\u0442\u044b","text":"<ul> <li>tickets/ \u2013 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0431\u0438\u043b\u0435\u0442\u043e\u0432 / \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430.</li> <li>tickets// \u2013 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430."},{"location":"urls/#_6","title":"\u0417\u0430\u043a\u0430\u0437\u044b","text":"<ul> <li>orders/ \u2013 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 / \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043d\u043e\u0432\u043e\u0433\u043e \u0437\u0430\u043a\u0430\u0437\u0430.</li> <li>orders// \u2013 \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0437\u0430\u043a\u0430\u0437\u0430. <li>orders//confirm/ \u2013 \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430."},{"location":"urls/#_7","title":"\u041e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u044b","text":"<ul> <li>organizer/assign// \u2013 \u041d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 \u043d\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442. <li>organizer/concerts/ \u2013 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432, \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u043e\u043c.</li>"},{"location":"views/","title":"API Endpoints Documentation","text":""},{"location":"views/#_1","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<p>POST <code>/register_user/</code> - Summary: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0435, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0432 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 <code>UserRegistrationSerializer</code>. - Request Body: <code>UserRegistrationSerializer</code> - Responses:   - <code>201</code>: \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438   - </p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\",\n    request_body=UserRegistrationSerializer,\n    responses={201: \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\", 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\"},\n)\n@api_view([\"POST\"])\n@permission_classes([AllowAny])\ndef register_user(request):\n    serializer = UserRegistrationSerializer(data=request.data)\n    if serializer.is_valid():\n        if User.objects.filter(username=serializer.validated_data[\"username\"]).exists():\n            return Response({\"error\": \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        User.objects.create_user(**serializer.validated_data)\n        return Response({\"message\": \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\"}, status=status.HTTP_201_CREATED)\n\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_2","title":"\u0412\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<p>POST <code>/login_user/</code> - Summary: \u0412\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u043e\u0439\u0442\u0438 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0432\u043e\u0438 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. - Request Body: <code>UserLoginSerializer</code> - Responses:   - <code>200</code>: \u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0432\u0445\u043e\u0434   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438   - <code>401</code>: \u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435   - </p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0412\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\",\n    request_body=UserLoginSerializer,\n    responses={200: \"\u0423\u0441\u043f\u0435\u0448\u043d\u044b\u0439 \u0432\u0445\u043e\u0434\", 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\", 401: \"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0435 \u0443\u0447\u0435\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\"},\n)\n@api_view([\"POST\"])\n@permission_classes([AllowAny])\ndef login_user(request):\n    user = authenticate(username=request.data.get(\"username\"), password=request.data.get(\"password\"))\n    if user:\n        refresh = RefreshToken.for_user(user)\n        return Response({\"refresh\": str(refresh), \"access\": str(refresh.access_token)}, status=status.HTTP_200_OK)\n    return Response({\"error\": \"\u041d\u0435\u0432\u0435\u0440\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u043f\u0430\u0440\u043e\u043b\u044c\"}, status=status.HTTP_401_UNAUTHORIZED)\n</code></pre>"},{"location":"views/#_3","title":"\u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","text":"<p>POST <code>/logout_user/</code> - Summary: \u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u0441\u0438\u0441\u0442\u0435\u043c\u044b. - Responses:   - <code>200</code>: \u0412\u044b\u0445\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0412\u044b\u0445\u043e\u0434 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\",\n    responses={200: \"\u0412\u044b\u0445\u043e\u0434 \u0443\u0441\u043f\u0435\u0448\u0435\u043d\"},\n)\n@api_view([\"POST\"])\n@permission_classes([IsAuthenticated])\ndef logout_user(request):\n    request.auth.delete()\n    return Response({\"message\": \"\u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0432\u044b\u0448\u043b\u0438\"}, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"views/#_4","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432","text":"<p>GET <code>/concert_list/</code> - Summary: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432. - Responses:   - <code>200</code>: <code>ConcertSerializer(many=True)</code></p> <pre><code>@swagger_auto_schema(\n    method=\"get\",\n    operation_summary=\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432\",\n    responses={200: ConcertSerializer(many=True)}\n)\n@api_view([\"GET\"])\n@permission_classes([AllowAny])\ndef concert_list(request):\n    concerts = Concert.objects.all()\n    serializer = ConcertSerializer(concerts, many=True)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"views/#_5","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435","text":"<p>GET <code>/concert_detail/&lt;pk&gt;/</code> - Summary: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. - Responses:   - <code>200</code>: <code>ConcertDetailSerializer</code>   - <code>404</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"get\",\n    operation_summary=\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435\",\n    responses={200: ConcertDetailSerializer, 404: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"GET\"])\n@permission_classes([AllowAny])\ndef concert_detail(request, pk):\n    try:\n        concert = Concert.objects.get(pk=pk)\n    except Concert.DoesNotExist:\n        return Response({\"error\": \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n\n    serializer = ConcertDetailSerializer(concert)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"views/#_6","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430","text":"<p>POST <code>/ticket_list_create/</code> - Summary: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0431\u0438\u043b\u0435\u0442 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - Request Body: <code>TicketCreateSerializer</code> - Responses:   - <code>201</code>: <code>TicketSerializer</code>   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438   - <code>403</code>: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430\",\n    request_body=TicketCreateSerializer,\n    responses={201: TicketSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\", 403: \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\"}\n)\n@api_view([\"POST\"])\n@permission_classes([AllowAny])\ndef ticket_list_create(request):\n    serializer = TicketCreateSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_7","title":"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430","text":"<p>GET, PUT, PATCH, DELETE <code>/ticket_detail/&lt;pk&gt;/</code> - Summary: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435, \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435, \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c, \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0431\u0438\u043b\u0435\u0442 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. - Request Body (for PUT, PATCH): <code>TicketSerializer</code> - Responses:   - <code>200</code>: <code>TicketSerializer</code>   - <code>204</code>: \u0411\u0438\u043b\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438   - <code>403</code>: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432   - <code>404</code>: \u0411\u0438\u043b\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"put\",\n    operation_summary=\"\u041e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430\",\n    request_body=TicketSerializer,\n    responses={200: TicketSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\", 403: \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\", 404: \"\u0411\u0438\u043b\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@swagger_auto_schema(\n    method=\"patch\",\n    operation_summary=\"\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430\",\n    request_body=TicketSerializer,\n    responses={200: TicketSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\", 403: \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\", 404: \"\u0411\u0438\u043b\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@swagger_auto_schema(\n    method=\"delete\",\n    operation_summary=\"\u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0431\u0438\u043b\u0435\u0442\u0430\",\n    responses={204: \"\u0411\u0438\u043b\u0435\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\", 403: \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\", 404: \"\u0411\u0438\u043b\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@swagger_auto_schema(\n    method=\"get\",\n    operation_summary=\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0431\u0438\u043b\u0435\u0442\u0435\",\n    responses={200: TicketSerializer, 404: \"\u0411\u0438\u043b\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"GET\", \"PUT\", \"PATCH\", \"DELETE\"])\n@permission_classes([AllowAny])\ndef ticket_detail(request, pk):\n    try:\n        ticket = Ticket.objects.get(pk=pk)\n    except Ticket.DoesNotExist:\n        return Response({\"error\": \"\u0411\u0438\u043b\u0435\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n\n    if request.method == \"GET\":\n        return Response(TicketSerializer(ticket).data)\n\n    if not request.user.is_staff:\n        return Response({\"error\": \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\"}, status=status.HTTP_403_FORBIDDEN)\n\n    if request.method in [\"PUT\", \"PATCH\"]:\n        serializer = TicketSerializer(ticket, data=request.data, partial=(request.method == \"PATCH\"))\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n    ticket.delete()\n    return Response(status=status.HTTP_204_NO_CONTENT)\n</code></pre>"},{"location":"views/#_8","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430","text":"<p>POST <code>/order_list_create/</code> - Summary: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u0437\u0430\u043a\u0430\u0437 \u043d\u0430 \u0431\u0438\u043b\u0435\u0442\u044b \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - Request Body: <code>OrderCreationSerializer</code> - Responses:   - <code>201</code>: <code>OrderCreationSerializer</code>   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430\",\n    request_body=OrderCreationSerializer,\n    responses={201: OrderCreationSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\"}\n)\n@api_view([\"POST\"])\n@permission_classes([IsAuthenticated])\ndef order_list_create(request):\n    serializer = OrderCreationSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save(user=request.user)\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_9","title":"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430","text":"<p>POST <code>/confirm_order/&lt;pk&gt;/</code> - Summary: \u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u0442\u044c \u0437\u0430\u043a\u0430\u0437\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. - Responses:   - <code>200</code>: \u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d   - <code>404</code>: \u0417\u0430\u043a\u0430\u0437 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u041f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430\",\n    responses={200: \"\u0417\u0430\u043a\u0430\u0437 \u043f\u043e\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0435\u043d\", 404: \"\u0417\u0430\u043a\u0430\u0437 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"POST\"])\n@permission_classes([IsAdminUser])\ndef confirm_order(request, pk):\n    try:\n        order = Order.objects.get(pk=pk)\n    except Order.DoesNotExist:\n        return Response({\"error\": \"\u0417\u0430\u043a\u0430\u0437 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n\n    order.status = \"confirmed\"\n    order.save()\n    return Response({\"status\": \"Order confirmed\"}, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"views/#_10","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442","text":"<p>POST <code>/create_concert/</code> - Summary: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u043a\u043e\u043d\u0446\u0435\u0440\u0442 \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443. - Request Body: <code>ConcertSerializer</code> - Responses:   - <code>201</code>: <code>ConcertSerializer</code>   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\",\n    request_body=ConcertSerializer,\n    responses={201: ConcertSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\"}\n)\n@api_view([\"POST\"])\n@permission_classes([IsAdminUser])\ndef create_concert(request):\n    serializer = ConcertSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_11","title":"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442","text":"<p>DELETE <code>/delete_concert/&lt;pk&gt;/</code> - Summary: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. - Responses:   - <code>204</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u0443\u0434\u0430\u043b\u0435\u043d   - <code>404</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"delete\",\n    operation_summary=\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\",\n    responses={204: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u0443\u0434\u0430\u043b\u0435\u043d\", 404: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"DELETE\"])\n@permission_classes([IsAdminUser])\ndef delete_concert(request, pk):\n    try:\n        concert = Concert.objects.get(pk=pk)\n        concert.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n    except Concert.DoesNotExist:\n        return Response({\"error\": \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n</code></pre>"},{"location":"views/#_12","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442","text":"<p>PUT <code>/update_concert/&lt;pk&gt;/</code> - Summary: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u043c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435. - Request Body: <code>ConcertSerializer</code> - Responses:   - <code>200</code>: <code>ConcertSerializer</code>   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438   - <code>404</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"put\",\n    operation_summary=\"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\",\n    request_body=ConcertSerializer,\n    responses={200: ConcertSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\", 404: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"PUT\"])\n@permission_classes([IsAdminUser])\ndef update_concert(request, pk):\n    try:\n        concert = Concert.objects.get(pk=pk)\n    except Concert.DoesNotExist:\n        return Response({\"error\": \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n\n    serializer = ConcertSerializer(concert, data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_13","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0437\u0430\u043a\u0430\u0437","text":"<p>GET <code>/get_order/&lt;pk&gt;/</code> - Summary: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0437\u0430\u043a\u0430\u0437 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c \u0437\u0430\u043a\u0430\u0437\u0435 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. - Responses:   - <code>200</code>: <code>OrderSerializer</code>   - <code>404</code>: \u0417\u0430\u043a\u0430\u0437 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"get\",\n    operation_summary=\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0437\u0430\u043a\u0430\u0437\",\n    responses={200: OrderSerializer, 404: \"\u0417\u0430\u043a\u0430\u0437 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"GET\"])\n@permission_classes([IsAuthenticated])\ndef get_order(request, pk):\n    try:\n        order = Order.objects.get(pk=pk)\n        return Response(OrderSerializer(order).data)\n    except Order.DoesNotExist:\n        return Response({\"error\": \"\u0417\u0430\u043a\u0430\u0437 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n</code></pre>"},{"location":"views/#_14","title":"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430","text":"<p>POST <code>/add_equipment_to_concert/</code> - Summary: \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043a \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u043c\u0443 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0443. - Request Body: <code>ConcertEquipmentSerializer</code> - Responses:   - <code>201</code>: <code>ConcertEquipmentSerializer</code>   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\",\n    request_body=ConcertEquipmentSerializer,\n    responses={201: ConcertEquipmentSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\"}\n)\n@api_view([\"POST\"])\n@permission_classes([IsAdminUser])\ndef add_equipment_to_concert(request):\n    serializer = ConcertEquipmentSerializer(data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_15","title":"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430","text":"<p>DELETE <code>/remove_equipment_from_concert/&lt;pk&gt;/</code> - Summary: \u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 \u043f\u043e \u0435\u0433\u043e \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0443. - Responses:   - <code>204</code>: \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u043e   - <code>404</code>: \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e</p> <pre><code>@swagger_auto_schema(\n    method=\"delete\",\n    operation_summary=\"\u0423\u0434\u0430\u043b\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\",\n    responses={204: \"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u043e\", 404: \"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\"}\n)\n@api_view([\"DELETE\"])\n@permission_classes([IsAdminUser])\ndef remove_equipment_from_concert(request, pk):\n    try:\n        equipment = ConcertEquipment.objects.get(pk=pk)\n        equipment.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)\n    except ConcertEquipment.DoesNotExist:\n        return Response({\"error\": \"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\"}, status=status.HTTP_404_NOT_FOUND)\n</code></pre>"},{"location":"views/#_16","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430","text":"<p>PUT <code>/update_equipment_for_concert/&lt;pk&gt;/</code> - Summary: \u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430\u043c \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0438 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - Request Body: <code>ConcertEquipmentSerializer</code> - Responses:   - <code>200</code>: <code>ConcertEquipmentSerializer</code>   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438   - <code>404</code>: \u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e</p> <pre><code>@swagger_auto_schema(\n    method=\"put\",\n    operation_summary=\"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\",\n    request_body=ConcertEquipmentSerializer,\n    responses={200: ConcertEquipmentSerializer, 400: \"\u041e\u0448\u0438\u0431\u043a\u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438\", 404: \"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\"}\n)\n@api_view([\"PUT\"])\n@permission_classes([IsAdminUser])\ndef update_equipment_for_concert(request, pk):\n    try:\n        equipment = ConcertEquipment.objects.get(pk=pk)\n    except ConcertEquipment.DoesNotExist:\n        return Response({\"error\": \"\u041e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e\"}, status=status.HTTP_404_NOT_FOUND)\n\n    serializer = ConcertEquipmentSerializer(equipment, data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n</code></pre>"},{"location":"views/#_17","title":"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430","text":"<p>GET <code>/get_equipment_for_concert/&lt;concert_id&gt;/</code> - Summary: \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u044f, \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430. - Responses:   - <code>200</code>: <code>ConcertEquipmentSerializer(many=True)</code>   - <code>404</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p> <pre><code>@swagger_auto_schema(\n    method=\"get\",\n    operation_summary=\"\u041f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0431\u043e\u0440\u0443\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\",\n    responses={200: ConcertEquipmentSerializer(many=True), 404: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}\n)\n@api_view([\"GET\"])\n@permission_classes([IsAdminUser])\ndef get_equipment_for_concert(request, concert_id):\n    try:\n        concert = Concert.objects.get(pk=concert_id)\n    except Concert.DoesNotExist:\n        return Response({\"error\": \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n\n    concert_equipment = ConcertEquipment.objects.filter(concert=concert)\n    return Response(ConcertEquipmentSerializer(concert_equipment, many=True).data)\n</code></pre>"},{"location":"views/#_18","title":"\u041d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443","text":"<p>POST <code>/assign_concert/&lt;pk&gt;/</code> - Summary: \u041d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443. - Request Body: <code>OrganizerSerializer</code> - Responses:   - <code>200</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435   - <code>404</code>: \u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d   - <code>403</code>: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432</p> <pre><code>@swagger_auto_schema(\n    method=\"post\",\n    operation_summary=\"\u041d\u0430\u0437\u043d\u0430\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0446\u0435\u0440\u0442 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443\",\n    request_body=OrganizerSerializer,\n    responses={\n        200: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443\",\n        400: \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435\",\n        404: \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\",\n        403: \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\"\n    }\n)\n@api_view([\"POST\"])\n@permission_classes([IsAdminUser])\ndef assign_concert(request, pk=None):\n    if not hasattr(request.user, \"employee\"):\n        return Response({\"error\": \"\u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435\u0442 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u043e\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\"}, status=status.HTTP_403_FORBIDDEN)\n\n    try:\n        concert = Concert.objects.get(pk=pk)\n    except Concert.DoesNotExist:\n        return Response({\"error\": \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\"}, status=status.HTTP_404_NOT_FOUND)\n\n    try:\n        Organizer.objects.create(employee=request.user.employee, concert=concert)\n    except Exception as e:\n        return Response({\"error\": f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0438 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430: {str(e)}\"}, status=status.HTTP_400_BAD_REQUEST)\n\n    return Response({\"status\": \"\u041a\u043e\u043d\u0446\u0435\u0440\u0442 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443\"}, status=status.HTTP_200_OK)\n</code></pre>"},{"location":"views/#_19","title":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430","text":"<p>GET <code>/get_organizer_concerts/</code> - Summary: \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430 - Description: \u042d\u0442\u043e\u0442 \u044d\u043d\u0434\u043f\u043e\u0438\u043d\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432, \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0443. - Responses:   - <code>200</code>: <code>ConcertDetailSerializer(many=True)</code>   - <code>403</code>: \u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432   - <code>400</code>: \u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430</p> <p>```python @swagger_auto_schema(     method=\"get\",     operation_summary=\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0442\u043e\u0440\u0430\",     responses={         200: ConcertDetailSerializer(many=True),         403: \"\u041d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u043f\u0440\u0430\u0432\",         400: \"\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\"     } ) @api_view([\"GET\"]) @permission_classes([IsAdminUser]) def get_organizer_concerts(request):     if not hasattr(request.user, \"employee\"):         return Response({\"error\": \"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u043c\"}, status=status.HTTP_403</p>"}]}
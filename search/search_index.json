{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WEB-\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1. \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438.</p>"},{"location":"#_1","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435","text":"<ul> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4</li> <li>\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5</li> </ul>"},{"location":"leetcode/","title":"Leetcode","text":""},{"location":"leetcode/#leetcode","title":"Leetcode","text":""},{"location":"leetcode/#27-remove-element","title":"27. Remove Element","text":"<p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.</p> <p>Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:</p> <p>Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums. Return k. Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <p>int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length.                             // It is sorted with no values equaling val.</p> <p>int k = removeElement(nums, val); // Calls your implementation</p> <p>assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i &lt; actualLength; i++) {     assert nums[i] == expectedNums[i]; } If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <p>Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,,] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores). Example 2:</p> <p>Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,,,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Constraints:</p> <p>0 &lt;= nums.length &lt;= 100 0 &lt;= nums[i] &lt;= 50 0 &lt;= val &lt;= 100</p>"},{"location":"leetcode/#solution","title":"Solution","text":"<pre><code>class Solution:\n    def removeElement(self, nums: List[int], val: int) -&gt; int:\n        count = 0\n        for i in range(len(nums))[::-1]:\n            if nums[i] == val:\n                nums.pop(i)\n                nums.append('_')\n                count += 1\n        return len(nums)-count        \n\n</code></pre>"},{"location":"leetcode/#88-merge-sorted-array","title":"88. Merge Sorted Array","text":"<p>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</p> <p>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</p> <p>Example 1:</p> <p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1. Example 2:</p> <p>Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1]. Example 3:</p> <p>Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</p> <p>Constraints:</p> <p>nums1.length == m + n nums2.length == n 0 &lt;= m, n &lt;= 200 1 &lt;= m + n &lt;= 200 -109 &lt;= nums1[i], nums2[j] &lt;= 109</p>"},{"location":"leetcode/#solution_1","title":"Solution","text":"<pre><code>class Solution:\n    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -&gt; None:\n        \"\"\"\n        Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        del nums1[m:m+n]\n        for i in range(n):\n            k=0\n            while k in range (len(nums1)) and nums1[k] &lt; nums2[i]:\n                k+=1\n            nums1.insert(k, nums2[i])\n\n</code></pre>"},{"location":"leetcode/#238-product-of-array-except-self","title":"238. Product of Array Except Self","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: [24,12,8,6]</p> <p>Example 2:</p> <p>Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]</p> <p>Constraints:</p> <p>2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>"},{"location":"leetcode/#solution_2","title":"Solution","text":"<pre><code>class Solution:\n    def productExceptSelf(self, nums: List[int]) -&gt; List[int]:\n        n = len(nums)\n        answer = [1] * n\n\n        left_product = 1\n        for i in range(n):\n            answer[i] = left_product\n            left_product *= nums[i]\n\n        right_product = 1\n        for i in range(n - 1, -1, -1):\n            answer[i] *= right_product\n            right_product *= nums[i]\n\n        return answer\n</code></pre>"},{"location":"leetcode/#238-product-of-array-except-self_1","title":"238. Product of Array Except Self","text":"<p>Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].</p> <p>The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p> <p>You must write an algorithm that runs in O(n) time and without using the division operation.</p> <p>Example 1:</p> <p>Input: nums = [1,2,3,4] Output: [24,12,8,6]</p> <p>Example 2:</p> <p>Input: nums = [-1,1,0,-3,3] Output: [0,0,9,0,0]</p> <p>Constraints:</p> <p>2 &lt;= nums.length &lt;= 105 -30 &lt;= nums[i] &lt;= 30 The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.</p>"},{"location":"leetcode/#solution_3","title":"Solution","text":"<pre><code>class RandomizedSet:\n    def __init__(self):\n        self.val_to_index = {}\n        self.values = []\n\n    def insert(self, val: int) -&gt; bool:\n        if val in self.val_to_index:\n            return False\n        self.val_to_index[val] = len(self.values)\n        self.values.append(val)\n        return True\n\n    def remove(self, val: int) -&gt; bool:\n        if val not in self.val_to_index:\n            return False\n        index = self.val_to_index[val]\n        last_val = self.values[-1]\n        self.values[index] = last_val\n        self.val_to_index[last_val] = index\n        self.values.pop()\n        del self.val_to_index[val]\n        return True\n\n    def getRandom(self) -&gt; int:\n        return random.choice(self.values)\n</code></pre>"},{"location":"leetcode/#274-h-index","title":"274. H-Index","text":"<p>Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return the researcher's h-index.</p> <p>According to the definition of h-index on Wikipedia: The h-index is defined as the maximum value of h such that the given researcher has published at least h papers that have each been cited at least h times.</p> <p>Example 1:</p> <p>Input: citations = [3,0,6,1,5] Output: 3 Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. Example 2:</p> <p>Input: citations = [1,3,1] Output: 1</p>"},{"location":"leetcode/#solution_4","title":"Solution","text":"<pre><code>class Solution:\n    def hIndex(self, citations: List[int]) -&gt; int:\n        citations.sort(reverse=True)  \n        h_index = 0\n        for i, citation in enumerate(citations):\n            if citation &gt;= i + 1:\n                h_index = i + 1\n            else:\n                break\n        return h_index\n</code></pre>"},{"location":"leetcode/#55-jump-game","title":"55. Jump Game","text":"<p>You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.</p> <p>Return true if you can reach the last index, or false otherwise.</p> <p>Example 1:</p> <p>Input: nums = [2,3,1,1,4] Output: true Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index. Example 2:</p> <p>Input: nums = [3,2,1,0,4] Output: false Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.</p> <p>Constraints:</p> <p>1 &lt;= nums.length &lt;= 104 0 &lt;= nums[i] &lt;= 105</p>"},{"location":"leetcode/#solution_5","title":"Solution","text":"<pre><code>class Solution:\n    def canJump(self, nums: List[int]) -&gt; bool:\n        max_reach = 0\n        for i, jump in enumerate(nums):\n            if i &gt; max_reach:\n                return False\n            max_reach = max(max_reach, i + jump)\n            if max_reach &gt;= len(nums) - 1:\n                return True\n        return False\n</code></pre>"},{"location":"leetcode/#122-best-time-to-buy-and-sell-stock-ii","title":"122. Best Time to Buy and Sell Stock II","text":"<p>You are given an integer array prices where prices[i] is the price of a given stock on the ith day.</p> <p>On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.</p> <p>Find and return the maximum profit you can achieve.</p> <p>Example 1:</p> <p>Input: prices = [7,1,5,3,6,4] Output: 7 Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7. Example 2:</p> <p>Input: prices = [1,2,3,4,5] Output: 4 Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4. Example 3:</p> <p>Input: prices = [7,6,4,3,1] Output: 0 Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.</p> <p>Constraints:</p> <p>1 &lt;= prices.length &lt;= 3 * 104 0 &lt;= prices[i] &lt;= 104</p>"},{"location":"leetcode/#solution_6","title":"Solution","text":"<pre><code>class Solution:\n    def maxProfit(self, prices: List[int]) -&gt; int:\n        max_profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] &gt; prices[i - 1]:\n                max_profit += prices[i] - prices[i - 1]\n        return max_profit\n</code></pre>"},{"location":"task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</p> <p>\u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 client.py:</p> <pre><code>import socket\n\n\ndef start_client():\n    server_address = (\"127.0.0.1\", 12345)\n\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as client_socket:\n        message = \"Hello, server\"\n        client_socket.sendto(message.encode(), server_address)\n        print(f\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0443: {message}\")\n\n        data, _ = client_socket.recvfrom(1024)\n        print(f\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {data.decode()}\")\n\n\nif __name__ == \"__main__\":\n    start_client()\n</code></pre> <p> \u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 server.py:</p> <pre><code>import socket\n\n\ndef start_server():\n    server_address = (\"127.0.0.1\", 12345)\n\n    with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as server_socket:\n        server_socket.bind(server_address)\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439...\")\n\n        while True:\n            data, client_address = server_socket.recvfrom(1024)\n            print(f\"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 {client_address}: {data.decode()}\")\n\n            response = \"Hello, client\"\n            server_socket.sendto(response.encode(), client_address)\n\n\nif __name__ == \"__main__\":\n    start_server()\n</code></pre> <p></p>"},{"location":"task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p> <p>\u041c\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438:</p> <pre><code>\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.\n</code></pre> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</p> <p>\u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 client.py:</p> <pre><code>import socket\n\n\ndef start_client():\n    server_address = (\"127.0.0.1\", 12345)\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:\n        client_socket.connect(server_address)\n        print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e.\")\n        print(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438\u043b\u0438 'exit' \u0434\u043b\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f.\")\n\n        while True:\n            message = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 a, b, c \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b: \")\n            if message.strip().lower() == \"exit\":\n                client_socket.sendall(message.encode())\n                print(\"\u0417\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\")\n                break\n\n            client_socket.sendall(message.encode())\n\n            result = client_socket.recv(1024).decode()\n            print(f\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {result}\")\n\n\nif __name__ == \"__main__\":\n    start_client()\n\n</code></pre> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 \u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 server.py:</p> <pre><code>import socket\nimport math\n\n\ndef solve_quadratic(a, b, c):\n    \"\"\"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f ax^2 + bx + c = 0\"\"\"\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant &gt; 0:\n        root1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        root2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        return f\"\u0414\u0432\u0430 \u043a\u043e\u0440\u043d\u044f: {root1}, {root2}\"\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        return f\"\u041e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: {root}\"\n    else:\n        return \"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\"\n\n\ndef start_server():\n    server_address = (\"127.0.0.1\", 12345)\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind(server_address)\n        server_socket.listen(1)\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439...\")\n\n        while True:\n            connection, client_address = server_socket.accept()\n            with connection:\n                print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442: {client_address}\")\n                while True:\n                    data = connection.recv(1024).decode()\n                    if not data or data.strip().lower() == \"exit\":\n                        print(\"\u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u043b \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435.\")\n                        break\n\n                    try:\n                        a, b, c = map(float, data.split())\n                        result = solve_quadratic(a, b, c)\n                    except ValueError:\n                        result = \"\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. \u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0440\u0438 \u0447\u0438\u0441\u043b\u0430.\"\n\n                    connection.sendall(result.encode())\n\n\nif __name__ == \"__main__\":\n    start_server()\n\n</code></pre> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 </p>"},{"location":"task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</p> <p>\u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 server.py:</p> <pre><code>import socket\nimport os\n\n\ndef start_server():\n    server_address = (\"127.0.0.1\", 8080)\n\n    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:\n        server_socket.bind(server_address)\n        server_socket.listen(1)\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 8080...\")\n\n        while True:\n            connection, client_address = server_socket.accept()\n            with connection:\n                print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d \u043a\u043b\u0438\u0435\u043d\u0442: {client_address}\")\n                request = connection.recv(1024).decode()\n\n                if not request.strip():\n                    print(\"\u041f\u0443\u0441\u0442\u043e\u0439 \u0437\u0430\u043f\u0440\u043e\u0441. \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c...\")\n                    continue\n\n                print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0437\u0430\u043f\u0440\u043e\u0441: {request.splitlines()[0]}\")\n\n                try:\n                    resource = request.split(\" \")[1]\n                except IndexError:\n                    resource = \"/\"\n\n                if resource == \"/\" or resource == \"/index.html\":\n                    # \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b\n                    try:\n                        with open(\"index.html\", \"r\", encoding=\"utf-8\") as file:\n                            html_content = file.read()\n                        response_body = html_content\n                        response_headers = (\n                            \"HTTP/1.1 200 OK\\r\\n\"\n                            \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                            f\"Content-Length: {len(response_body)}\\r\\n\"\n                            \"Connection: close\\r\\n\\r\\n\"\n                        )\n                    except FileNotFoundError:\n                        response_body = \"&lt;h1&gt;404 Not Found&lt;/h1&gt;\"\n                        response_headers = (\n                            \"HTTP/1.1 404 Not Found\\r\\n\"\n                            \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                            f\"Content-Length: {len(response_body)}\\r\\n\"\n                            \"Connection: close\\r\\n\\r\\n\"\n                        )\n                elif resource.startswith(\"/images/\"):\n                    # \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435\n                    image_path = resource.lstrip(\"/\")\n                    if os.path.exists(image_path):\n                        with open(image_path, \"rb\") as file:\n                            image_content = file.read()\n                        response_body = image_content\n                        response_headers = (\n                                               \"HTTP/1.1 200 OK\\r\\n\"\n                                               \"Content-Type: image/png\\r\\n\"\n                                               f\"Content-Length: {len(response_body)}\\r\\n\"\n                                               \"Connection: close\\r\\n\\r\\n\"\n                                           ).encode() + response_body\n                        connection.sendall(response_headers)\n                        continue\n                    else:\n                        response_body = \"&lt;h1&gt;404 Not Found&lt;/h1&gt;\"\n                        response_headers = (\n                            \"HTTP/1.1 404 Not Found\\r\\n\"\n                            \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                            f\"Content-Length: {len(response_body)}\\r\\n\"\n                            \"Connection: close\\r\\n\\r\\n\"\n                        )\n                else:\n                    # \u0415\u0441\u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\n                    response_body = \"&lt;h1&gt;404 Not Found&lt;/h1&gt;\"\n                    response_headers = (\n                        \"HTTP/1.1 404 Not Found\\r\\n\"\n                        \"Content-Type: text/html; charset=utf-8\\r\\n\"\n                        f\"Content-Length: {len(response_body)}\\r\\n\"\n                        \"Connection: close\\r\\n\\r\\n\"\n                    )\n\n                # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 HTTP-\u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\n                response = response_headers + response_body\n                connection.sendall(response.encode() if isinstance(response, str) else response)\n\n\nif __name__ == \"__main__\":\n    start_server()\n\n</code></pre> <p>\u041a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430&lt;/title&gt;\n        &lt;style&gt;\n        body {\n            margin: 0;\n            padding: 0;\n            font-family: \"Roboto Light\", sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            color: black;\n            text-align: center;\n            flex-direction: column;\n        }\n\n        h1 {\n            font-size: 3em;\n            text-shadow: 2px 2px 4px rgb(104, 181, 255);\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Welcome to server!&lt;/h1&gt;\n    &lt;h2&gt;kotyata kotyata kotyata&lt;/h2&gt;\n    &lt;img src=\"images/img.jpg\" width=\"300\"&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 http://localhost:8080</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 localhost \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 </p>"},{"location":"task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p> <p>\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f:</p> <p>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 socket.</p> <p>\u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 threading.</p> <p>\u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 client.py:</p> <pre><code>import socket\nimport threading\n\n\ndef receive_messages(client_socket):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\"\"\"\n    while True:\n        try:\n            message = client_socket.recv(1024).decode()\n            if message:\n                print(message)\n        except:\n            break\n\n\ndef start_client():\n    \"\"\"\u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443.\"\"\"\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((\"127.0.0.1\", 8080))\n\n    name = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \")\n    client_socket.send(name.encode())\n\n    # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\n    receive_thread.start()\n\n    # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\n    while True:\n        message = input()\n        if message.lower() == 'exit':\n            break\n        client_socket.send(message.encode())\n\n    client_socket.close()\n\n\nif __name__ == \"__main__\":\n    start_client()\n\n</code></pre> <p>\u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 server.py:</p> <pre><code>import socket\nimport threading\n\nclients = []\nclient_names = {}\n\n\ndef handle_client(client_socket, client_address):\n    \"\"\"\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.\"\"\"\n    try:\n        client_socket.send(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0435 \u0438\u043c\u044f: \".encode())\n        name = client_socket.recv(1024).decode().strip()\n        client_names[client_socket] = name\n        clients.append(client_socket)\n\n        print(f\"{name} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u0438\u0437 {client_address}\")\n\n        # \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        while True:\n            message = client_socket.recv(1024).decode()\n            if message:\n                print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 {name}: {message}\")\n                broadcast(f\"{name}: {message}\", client_socket)\n            else:\n                break\n    except:\n        print(f\"\u041e\u0448\u0438\u0431\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c {client_address}\")\n    finally:\n        clients.remove(client_socket)\n        del client_names[client_socket]\n        client_socket.close()\n\n\ndef broadcast(message, sender_socket):\n    \"\"\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f.\"\"\"\n    for client_socket in clients:\n        if client_socket != sender_socket:\n            try:\n                client_socket.send(message.encode())\n            except:\n                clients.remove(client_socket)\n\n\ndef start_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((\"127.0.0.1\", 8080))\n    server_socket.listen(5)\n    print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d. \u041e\u0436\u0438\u0434\u0430\u044e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f...\")\n\n    while True:\n        client_socket, client_address = server_socket.accept()\n        # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n        client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))\n        client_thread.start()\n\n\nif __name__ == \"__main__\":\n    start_server()\n\n</code></pre> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 </p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 </p>"},{"location":"task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p> <p>\u0417\u0430\u0434\u0430\u043d\u0438\u0435:</p> <pre><code>\u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d:\n    \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435.\n    \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.\n</code></pre> <p>\u043a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 server.py:</p> <pre><code>from socket import *\nfrom urllib.parse import unquote\n\ngrades = []\n\n\ndef generate_html():\n    try:\n        with open('index.html', 'r', encoding='utf-8') as f:\n            html = f.read()\n\n        table_rows = ''\n        for subject, grade in grades:\n            table_rows += f\"&lt;tr&gt;&lt;td&gt;{subject}&lt;/td&gt;&lt;td&gt;{grade}&lt;/td&gt;&lt;/tr&gt;\"\n\n        html = html.replace('&lt;!-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c --&gt;', table_rows)\n\n        return html\n    except Exception as e:\n        return f\"&lt;h1&gt;\u041e\u0448\u0438\u0431\u043a\u0430: {e}&lt;/h1&gt;\"\n\n\ndef parse_post_data(data):\n    params = {}\n    try:\n        body = data.split('\\r\\n\\r\\n', 1)[1]\n        for param in body.split('&amp;'):\n            key, value = param.split('=')\n            params[key] = unquote(value)\n    except IndexError:\n        pass\n    return params\n\n\nserver_socket = socket(AF_INET, SOCK_STREAM)\nserver_socket.bind(('localhost', 8080))\nserver_socket.listen(1)\n\nprint(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 8080...\")\n\nwhile True:\n    client_socket, client_address = server_socket.accept()\n    try:\n        request = client_socket.recv(4096).decode('utf-8')\n\n        headers = request.split('\\n')\n        method = headers[0].split()[0]\n\n        if method == 'GET':\n            response_body = generate_html()\n            response = f\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{response_body}\"\n            client_socket.sendall(response.encode('utf-8'))\n\n\n        elif method == 'POST':\n            params = parse_post_data(request)\n            subject = params.get('subject', '').strip()\n            grade = params.get('grade', '').strip()\n\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439\n            if subject and grade.isdigit() and 1 &lt;= int(grade) &lt;= 100:\n                grades.append((subject, grade))\n                response = \"HTTP/1.1 303 See Other\\r\\nLocation: /\\r\\n\\r\\n\"\n            else:\n                response_body = \"&lt;h1&gt;\u041e\u0448\u0438\u0431\u043a\u0430: \u041e\u0446\u0435\u043d\u043a\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u043c \u043e\u0442 1 \u0434\u043e 100&lt;/h1&gt;\"\n                response = f\"HTTP/1.1 400 Bad Request\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n{response_body}\"\n            client_socket.sendall(response.encode('utf-8'))\n\n\n    except Exception as e:\n        print(f\"\u041e\u0448\u0438\u0431\u043a\u0430: {e}\")\n\n    finally:\n        client_socket.close()\n\n\n</code></pre> <p>\u041a\u043e\u0434 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: \"SF Pro Text\", sans-serif;\n            background-color: #e3efef;\n            color: #000000;\n            text-align: center;\n            padding: 50px;\n        }\n        h1 {\n            color: #000000;\n        }\n        table {\n            margin: 0 auto;\n            border-collapse: collapse;\n            width: 50%;\n            background-color: #fff;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 12px;\n            text-align: center;\n        }\n        th {\n            background-color: #f2f2f2;\n            font-weight: bold;\n        }\n        form {\n            margin-top: 20px;\n        }\n        input[type=\"text\"] {\n            padding: 10px;\n            width: 200px;\n            margin: 5px 0;\n            border-radius: 10px;\n            border: 0;\n        }\n        input[type=\"number\"] {\n            padding: 10px;\n            width: 200px;\n            margin: 5px 0;\n            border-radius: 10px;\n            border: 0;\n        }\n        input[type=\"submit\"] {\n            margin-top: 10px;\n            padding: 10px 20px;\n            background-color: #68b5ff;\n            color: white;\n            border: none;\n            cursor: pointer;\n            border-radius: 10px;\n        }\n        input[type=\"submit\"]:hover {\n            background-color: #007bff;\n            border-radius: 10px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/h1&gt;\n    &lt;table&gt;\n        &lt;tr&gt;&lt;th&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430&lt;/th&gt;&lt;th&gt;\u041e\u0446\u0435\u043d\u043a\u0430&lt;/th&gt;&lt;/tr&gt;\n        &lt;!-- \u0422\u0430\u0431\u043b\u0438\u0446\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u0431\u0443\u0434\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c --&gt;\n    &lt;/table&gt;\n    &lt;form method=\"POST\"&gt;\n        &lt;input type=\"text\" name=\"subject\" placeholder=\"\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\" required&gt;&lt;br&gt;\n        &lt;input type=\"number\" name=\"grade\" placeholder=\"\u041e\u0446\u0435\u043d\u043a\u0430\" min=\"1\" max=\"100\" required&gt;&lt;br&gt;\n        &lt;input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"&gt;\n    &lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043d\u0430 http://localhost:8080</p> <p>\u0420\u0430\u0431\u043e\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 localhost \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u043a\u043e\u0434\u0430 \u043d\u0430 \u0441\u043a\u0440\u0438\u043d\u0448\u043e\u0442\u0435 </p> <p>\u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 </p> <p>\u041f\u0440\u0435\u0434\u043c\u0435\u0442 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d </p>"}]}